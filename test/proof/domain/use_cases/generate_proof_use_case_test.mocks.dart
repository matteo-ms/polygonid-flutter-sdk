// Mocks generated by Mockito 5.3.2 from annotations
// in polygonid_flutter_sdk/test/proof/domain/use_cases/generate_proof_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:typed_data' as _i18;

import 'package:mockito/mockito.dart' as _i1;
import 'package:polygonid_flutter_sdk/credential/domain/entities/claim_entity.dart'
    as _i19;
import 'package:polygonid_flutter_sdk/credential/domain/use_cases/get_auth_claim_use_case.dart'
    as _i24;
import 'package:polygonid_flutter_sdk/iden3comm/domain/entities/request/auth/proof_scope_request.dart'
    as _i20;
import 'package:polygonid_flutter_sdk/identity/domain/entities/did_entity.dart'
    as _i10;
import 'package:polygonid_flutter_sdk/identity/domain/entities/hash_entity.dart'
    as _i5;
import 'package:polygonid_flutter_sdk/identity/domain/entities/identity_entity.dart'
    as _i2;
import 'package:polygonid_flutter_sdk/identity/domain/entities/node_entity.dart'
    as _i4;
import 'package:polygonid_flutter_sdk/identity/domain/entities/rhs_node_entity.dart'
    as _i3;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_state_entity.dart'
    as _i15;
import 'package:polygonid_flutter_sdk/identity/domain/entities/tree_type.dart'
    as _i14;
import 'package:polygonid_flutter_sdk/identity/domain/repositories/identity_repository.dart'
    as _i11;
import 'package:polygonid_flutter_sdk/identity/domain/repositories/smt_repository.dart'
    as _i13;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/get_did_use_case.dart'
    as _i26;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/get_latest_state_use_case.dart'
    as _i28;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/identity/get_identity_use_case.dart'
    as _i23;
import 'package:polygonid_flutter_sdk/identity/domain/use_cases/sign_message_use_case.dart'
    as _i27;
import 'package:polygonid_flutter_sdk/proof/domain/entities/circuit_data_entity.dart'
    as _i7;
import 'package:polygonid_flutter_sdk/proof/domain/entities/download_info_entity.dart'
    as _i17;
import 'package:polygonid_flutter_sdk/proof/domain/entities/gist_proof_entity.dart'
    as _i9;
import 'package:polygonid_flutter_sdk/proof/domain/entities/jwz/jwz.dart'
    as _i21;
import 'package:polygonid_flutter_sdk/proof/domain/entities/jwz/jwz_proof.dart'
    as _i8;
import 'package:polygonid_flutter_sdk/proof/domain/entities/proof_entity.dart'
    as _i6;
import 'package:polygonid_flutter_sdk/proof/domain/repositories/proof_repository.dart'
    as _i16;
import 'package:polygonid_flutter_sdk/proof/domain/use_cases/get_gist_proof_use_case.dart'
    as _i25;
import 'package:polygonid_flutter_sdk/proof/domain/use_cases/prove_use_case.dart'
    as _i22;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIdentityEntity_0 extends _i1.SmartFake
    implements _i2.IdentityEntity {
  _FakeIdentityEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRhsNodeEntity_1 extends _i1.SmartFake implements _i3.RhsNodeEntity {
  _FakeRhsNodeEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeEntity_2 extends _i1.SmartFake implements _i4.NodeEntity {
  _FakeNodeEntity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHashEntity_3 extends _i1.SmartFake implements _i5.HashEntity {
  _FakeHashEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProofEntity_4 extends _i1.SmartFake implements _i6.ProofEntity {
  _FakeProofEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCircuitDataEntity_5 extends _i1.SmartFake
    implements _i7.CircuitDataEntity {
  _FakeCircuitDataEntity_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJWZProof_6 extends _i1.SmartFake implements _i8.JWZProof {
  _FakeJWZProof_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGistProofEntity_7 extends _i1.SmartFake
    implements _i9.GistProofEntity {
  _FakeGistProofEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDidEntity_8 extends _i1.SmartFake implements _i10.DidEntity {
  _FakeDidEntity_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IdentityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIdentityRepository extends _i1.Mock
    implements _i11.IdentityRepository {
  MockIdentityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> getPrivateKey({
    required String? accessMessage,
    required String? secret,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrivateKey,
          [],
          {
            #accessMessage: accessMessage,
            #secret: secret,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<List<String>> getPublicKeys({required dynamic privateKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicKeys,
          [],
          {#privateKey: privateKey},
        ),
        returnValue: _i12.Future<List<String>>.value(<String>[]),
      ) as _i12.Future<List<String>>);
  @override
  _i12.Future<void> storeIdentity({required _i2.IdentityEntity? identity}) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeIdentity,
          [],
          {#identity: identity},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> removeIdentity({required String? genesisDid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeIdentity,
          [],
          {#genesisDid: genesisDid},
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i2.IdentityEntity> getIdentity({required String? genesisDid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdentity,
          [],
          {#genesisDid: genesisDid},
        ),
        returnValue:
            _i12.Future<_i2.IdentityEntity>.value(_FakeIdentityEntity_0(
          this,
          Invocation.method(
            #getIdentity,
            [],
            {#genesisDid: genesisDid},
          ),
        )),
      ) as _i12.Future<_i2.IdentityEntity>);
  @override
  _i12.Future<List<_i2.IdentityEntity>> getIdentities() => (super.noSuchMethod(
        Invocation.method(
          #getIdentities,
          [],
        ),
        returnValue:
            _i12.Future<List<_i2.IdentityEntity>>.value(<_i2.IdentityEntity>[]),
      ) as _i12.Future<List<_i2.IdentityEntity>>);
  @override
  _i12.Future<String> signMessage({
    required String? privateKey,
    required String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signMessage,
          [],
          {
            #privateKey: privateKey,
            #message: message,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<String> getDidIdentifier({
    required String? blockchain,
    required String? network,
    required String? claimsRoot,
    int? profileNonce = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDidIdentifier,
          [],
          {
            #blockchain: blockchain,
            #network: network,
            #claimsRoot: claimsRoot,
            #profileNonce: profileNonce,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<Map<String, dynamic>> getNonRevProof({
    required String? identityState,
    required int? nonce,
    required String? baseUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNonRevProof,
          [],
          {
            #identityState: identityState,
            #nonce: nonce,
            #baseUrl: baseUrl,
          },
        ),
        returnValue:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i12.Future<Map<String, dynamic>>);
  @override
  _i12.Future<String> getState({
    required String? identifier,
    required String? contractAddress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getState,
          [],
          {
            #identifier: identifier,
            #contractAddress: contractAddress,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<String> convertIdToBigInt({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertIdToBigInt,
          [],
          {#id: id},
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<_i3.RhsNodeEntity> getStateRoots({required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStateRoots,
          [],
          {#url: url},
        ),
        returnValue: _i12.Future<_i3.RhsNodeEntity>.value(_FakeRhsNodeEntity_1(
          this,
          Invocation.method(
            #getStateRoots,
            [],
            {#url: url},
          ),
        )),
      ) as _i12.Future<_i3.RhsNodeEntity>);
  @override
  _i12.Future<_i4.NodeEntity> getAuthClaimNode(
          {required List<String>? children}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthClaimNode,
          [],
          {#children: children},
        ),
        returnValue: _i12.Future<_i4.NodeEntity>.value(_FakeNodeEntity_2(
          this,
          Invocation.method(
            #getAuthClaimNode,
            [],
            {#children: children},
          ),
        )),
      ) as _i12.Future<_i4.NodeEntity>);
  @override
  _i12.Future<String> exportIdentity({
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportIdentity,
          [],
          {
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<void> importIdentity({
    required String? did,
    required String? privateKey,
    required String? encryptedDb,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #importIdentity,
          [],
          {
            #did: did,
            #privateKey: privateKey,
            #encryptedDb: encryptedDb,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [SMTRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSMTRepository extends _i1.Mock implements _i13.SMTRepository {
  MockSMTRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<void> addLeaf({
    required _i4.NodeEntity? leaf,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addLeaf,
          [],
          {
            #leaf: leaf,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i4.NodeEntity> getNode({
    required _i5.HashEntity? hash,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNode,
          [],
          {
            #hash: hash,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<_i4.NodeEntity>.value(_FakeNodeEntity_2(
          this,
          Invocation.method(
            #getNode,
            [],
            {
              #hash: hash,
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i12.Future<_i4.NodeEntity>);
  @override
  _i12.Future<void> addNode({
    required _i5.HashEntity? hash,
    required _i4.NodeEntity? node,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNode,
          [],
          {
            #hash: hash,
            #node: node,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i5.HashEntity> getRoot({
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoot,
          [],
          {
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<_i5.HashEntity>.value(_FakeHashEntity_3(
          this,
          Invocation.method(
            #getRoot,
            [],
            {
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i12.Future<_i5.HashEntity>);
  @override
  _i12.Future<void> setRoot({
    required _i5.HashEntity? root,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRoot,
          [],
          {
            #root: root,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<_i6.ProofEntity> generateProof({
    required _i5.HashEntity? key,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateProof,
          [],
          {
            #key: key,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<_i6.ProofEntity>.value(_FakeProofEntity_4(
          this,
          Invocation.method(
            #generateProof,
            [],
            {
              #key: key,
              #type: type,
              #did: did,
              #privateKey: privateKey,
            },
          ),
        )),
      ) as _i12.Future<_i6.ProofEntity>);
  @override
  _i12.Future<void> createSMT({
    required int? maxLevels,
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSMT,
          [],
          {
            #maxLevels: maxLevels,
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<void> removeSMT({
    required _i14.TreeType? type,
    required String? did,
    required String? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSMT,
          [],
          {
            #type: type,
            #did: did,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
  @override
  _i12.Future<String> hashState({
    required String? claims,
    required String? revocation,
    required String? roots,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hashState,
          [],
          {
            #claims: claims,
            #revocation: revocation,
            #roots: roots,
          },
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<Map<String, dynamic>> convertState(
          {required _i15.TreeStateEntity? state}) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertState,
          [],
          {#state: state},
        ),
        returnValue:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i12.Future<Map<String, dynamic>>);
}

/// A class which mocks [ProofRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProofRepository extends _i1.Mock implements _i16.ProofRepository {
  MockProofRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Stream<_i17.DownloadInfo> get circuitsDownloadInfoStream =>
      (super.noSuchMethod(
        Invocation.getter(#circuitsDownloadInfoStream),
        returnValue: _i12.Stream<_i17.DownloadInfo>.empty(),
      ) as _i12.Stream<_i17.DownloadInfo>);
  @override
  _i12.Future<bool> isCircuitSupported({required String? circuitId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCircuitSupported,
          [],
          {#circuitId: circuitId},
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
  @override
  _i12.Future<_i7.CircuitDataEntity> loadCircuitFiles(String? circuitId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCircuitFiles,
          [circuitId],
        ),
        returnValue:
            _i12.Future<_i7.CircuitDataEntity>.value(_FakeCircuitDataEntity_5(
          this,
          Invocation.method(
            #loadCircuitFiles,
            [circuitId],
          ),
        )),
      ) as _i12.Future<_i7.CircuitDataEntity>);
  @override
  _i12.Future<_i18.Uint8List> calculateAtomicQueryInputs({
    required String? id,
    required int? profileNonce,
    required int? claimSubjectProfileNonce,
    required _i19.ClaimEntity? claim,
    required _i20.ProofScopeRequest? request,
    _i6.ProofEntity? incProof,
    _i6.ProofEntity? nonRevProof,
    _i9.GistProofEntity? gistProof,
    List<String>? authClaim,
    Map<String, dynamic>? treeState,
    String? challenge,
    String? signature,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateAtomicQueryInputs,
          [],
          {
            #id: id,
            #profileNonce: profileNonce,
            #claimSubjectProfileNonce: claimSubjectProfileNonce,
            #claim: claim,
            #request: request,
            #incProof: incProof,
            #nonRevProof: nonRevProof,
            #gistProof: gistProof,
            #authClaim: authClaim,
            #treeState: treeState,
            #challenge: challenge,
            #signature: signature,
          },
        ),
        returnValue: _i12.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i12.Future<_i18.Uint8List>);
  @override
  _i12.Future<_i18.Uint8List> calculateWitness(
    _i7.CircuitDataEntity? circuitData,
    _i18.Uint8List? atomicQueryInputs,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateWitness,
          [
            circuitData,
            atomicQueryInputs,
          ],
        ),
        returnValue: _i12.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i12.Future<_i18.Uint8List>);
  @override
  _i12.Future<_i8.JWZProof> prove(
    _i7.CircuitDataEntity? circuitData,
    _i18.Uint8List? wtnsBytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #prove,
          [
            circuitData,
            wtnsBytes,
          ],
        ),
        returnValue: _i12.Future<_i8.JWZProof>.value(_FakeJWZProof_6(
          this,
          Invocation.method(
            #prove,
            [
              circuitData,
              wtnsBytes,
            ],
          ),
        )),
      ) as _i12.Future<_i8.JWZProof>);
  @override
  _i12.Future<String> encodeJWZ({required _i21.JWZEntity? jwz}) =>
      (super.noSuchMethod(
        Invocation.method(
          #encodeJWZ,
          [],
          {#jwz: jwz},
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
  @override
  _i12.Future<_i9.GistProofEntity> getGistProof({
    required String? idAsInt,
    required String? contractAddress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGistProof,
          [],
          {
            #idAsInt: idAsInt,
            #contractAddress: contractAddress,
          },
        ),
        returnValue:
            _i12.Future<_i9.GistProofEntity>.value(_FakeGistProofEntity_7(
          this,
          Invocation.method(
            #getGistProof,
            [],
            {
              #idAsInt: idAsInt,
              #contractAddress: contractAddress,
            },
          ),
        )),
      ) as _i12.Future<_i9.GistProofEntity>);
  @override
  _i12.Future<bool> circuitsFilesExist() => (super.noSuchMethod(
        Invocation.method(
          #circuitsFilesExist,
          [],
        ),
        returnValue: _i12.Future<bool>.value(false),
      ) as _i12.Future<bool>);
  @override
  _i12.Future<void> initCircuitsDownloadFromServer() => (super.noSuchMethod(
        Invocation.method(
          #initCircuitsDownloadFromServer,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);
}

/// A class which mocks [ProveUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProveUseCase extends _i1.Mock implements _i22.ProveUseCase {
  MockProveUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i8.JWZProof> execute({required _i22.ProveParam? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i12.Future<_i8.JWZProof>.value(_FakeJWZProof_6(
          this,
          Invocation.method(
            #execute,
            [],
            {#param: param},
          ),
        )),
      ) as _i12.Future<_i8.JWZProof>);
}

/// A class which mocks [GetIdentityUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetIdentityUseCase extends _i1.Mock
    implements _i23.GetIdentityUseCase {
  MockGetIdentityUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i2.IdentityEntity> execute(
          {required _i23.GetIdentityParam? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue:
            _i12.Future<_i2.IdentityEntity>.value(_FakeIdentityEntity_0(
          this,
          Invocation.method(
            #execute,
            [],
            {#param: param},
          ),
        )),
      ) as _i12.Future<_i2.IdentityEntity>);
}

/// A class which mocks [GetAuthClaimUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAuthClaimUseCase extends _i1.Mock
    implements _i24.GetAuthClaimUseCase {
  MockGetAuthClaimUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<List<String>> execute({required List<String>? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i12.Future<List<String>>.value(<String>[]),
      ) as _i12.Future<List<String>>);
}

/// A class which mocks [GetGistProofUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGistProofUseCase extends _i1.Mock
    implements _i25.GetGistProofUseCase {
  MockGetGistProofUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i9.GistProofEntity> execute({required String? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue:
            _i12.Future<_i9.GistProofEntity>.value(_FakeGistProofEntity_7(
          this,
          Invocation.method(
            #execute,
            [],
            {#param: param},
          ),
        )),
      ) as _i12.Future<_i9.GistProofEntity>);
}

/// A class which mocks [GetDidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDidUseCase extends _i1.Mock implements _i26.GetDidUseCase {
  MockGetDidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i10.DidEntity> execute({required String? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i12.Future<_i10.DidEntity>.value(_FakeDidEntity_8(
          this,
          Invocation.method(
            #execute,
            [],
            {#param: param},
          ),
        )),
      ) as _i12.Future<_i10.DidEntity>);
}

/// A class which mocks [SignMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignMessageUseCase extends _i1.Mock
    implements _i27.SignMessageUseCase {
  MockSignMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<String> execute({required _i27.SignMessageParam? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue: _i12.Future<String>.value(''),
      ) as _i12.Future<String>);
}

/// A class which mocks [GetLatestStateUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLatestStateUseCase extends _i1.Mock
    implements _i28.GetLatestStateUseCase {
  MockGetLatestStateUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<Map<String, dynamic>> execute(
          {required _i28.GetLatestStateParam? param}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#param: param},
        ),
        returnValue:
            _i12.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i12.Future<Map<String, dynamic>>);
}
